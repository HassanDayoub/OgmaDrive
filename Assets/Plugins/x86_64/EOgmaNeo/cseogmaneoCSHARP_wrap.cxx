/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include <cmath>
#include <iostream>



#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_eogmaneo(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_eogmaneo(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_eogmaneo(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <typeinfo>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "ComputeSystem.h"
#include "Layer.h"
#include "Hierarchy.h"
#include "RandomEncoder.h"
#include "CornerEncoder.h"
#include "Preprocessing.h"
#ifdef SFML_FOUND
#include "VisAdapter.h"
#endif
#ifdef OPENCV_FOUND
#include "OpenCVInterop.h"
#endif

SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< int > > *new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< int > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< int > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< int > std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitemcopy(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int > const &std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitem(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__setitem(std::vector< std::vector< int > > *self,int index,std::vector< int > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__AddRange(std::vector< std::vector< int > > *self,std::vector< std::vector< int > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< int > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg__GetRange(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< int > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Insert(std::vector< std::vector< int > > *self,int index,std::vector< int > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__InsertRange(std::vector< std::vector< int > > *self,int index,std::vector< std::vector< int > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveAt(std::vector< std::vector< int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveRange(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< int > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg__Repeat(std::vector< int > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< int > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< int > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__SetRange(std::vector< std::vector< int > > *self,int index,std::vector< std::vector< int > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::pair< int,int > > *new_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< int,int > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< int,int > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< int,int > std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__getitemcopy(std::vector< std::pair< int,int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::pair< int,int > const &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__getitem(std::vector< std::pair< int,int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__setitem(std::vector< std::pair< int,int > > *self,int index,std::pair< int,int > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__AddRange(std::vector< std::pair< int,int > > *self,std::vector< std::pair< int,int > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< int,int > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__GetRange(std::vector< std::pair< int,int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< int,int > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Insert(std::vector< std::pair< int,int > > *self,int index,std::pair< int,int > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__InsertRange(std::vector< std::pair< int,int > > *self,int index,std::vector< std::pair< int,int > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__RemoveAt(std::vector< std::pair< int,int > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__RemoveRange(std::vector< std::pair< int,int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< int,int > > *std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Repeat(std::pair< int,int > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< int,int > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< int,int > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< int,int > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__SetRange(std::vector< std::pair< int,int > > *self,int index,std::vector< std::pair< int,int > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< eogmaneo::LayerDesc > *new_std_vector_Sl_eogmaneo_LayerDesc_Sg___SWIG_2(int capacity){
        std::vector< eogmaneo::LayerDesc >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< eogmaneo::LayerDesc >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN eogmaneo::LayerDesc std_vector_Sl_eogmaneo_LayerDesc_Sg__getitemcopy(std::vector< eogmaneo::LayerDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN eogmaneo::LayerDesc const &std_vector_Sl_eogmaneo_LayerDesc_Sg__getitem(std::vector< eogmaneo::LayerDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__setitem(std::vector< eogmaneo::LayerDesc > *self,int index,eogmaneo::LayerDesc const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__AddRange(std::vector< eogmaneo::LayerDesc > *self,std::vector< eogmaneo::LayerDesc > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< eogmaneo::LayerDesc > *std_vector_Sl_eogmaneo_LayerDesc_Sg__GetRange(std::vector< eogmaneo::LayerDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< eogmaneo::LayerDesc >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__Insert(std::vector< eogmaneo::LayerDesc > *self,int index,eogmaneo::LayerDesc const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__InsertRange(std::vector< eogmaneo::LayerDesc > *self,int index,std::vector< eogmaneo::LayerDesc > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__RemoveAt(std::vector< eogmaneo::LayerDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__RemoveRange(std::vector< eogmaneo::LayerDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< eogmaneo::LayerDesc > *std_vector_Sl_eogmaneo_LayerDesc_Sg__Repeat(eogmaneo::LayerDesc const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< eogmaneo::LayerDesc >(count, value);
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__Reverse__SWIG_0(std::vector< eogmaneo::LayerDesc > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__Reverse__SWIG_1(std::vector< eogmaneo::LayerDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_eogmaneo_LayerDesc_Sg__SetRange(std::vector< eogmaneo::LayerDesc > *self,int index,std::vector< eogmaneo::LayerDesc > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN float const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::vector< float > > *new_std_vector_Sl_std_vector_Sl_float_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::vector< float > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::vector< float > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::vector< float > std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitemcopy(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< float > const &std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitem(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__setitem(std::vector< std::vector< float > > *self,int index,std::vector< float > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__AddRange(std::vector< std::vector< float > > *self,std::vector< std::vector< float > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::vector< float > > *std_vector_Sl_std_vector_Sl_float_Sg__Sg__GetRange(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::vector< float > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Insert(std::vector< std::vector< float > > *self,int index,std::vector< float > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__InsertRange(std::vector< std::vector< float > > *self,int index,std::vector< std::vector< float > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveAt(std::vector< std::vector< float > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveRange(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::vector< float > > *std_vector_Sl_std_vector_Sl_float_Sg__Sg__Repeat(std::vector< float > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::vector< float > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_0(std::vector< std::vector< float > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_1(std::vector< std::vector< float > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_vector_Sl_float_Sg__Sg__SetRange(std::vector< std::vector< float > > *self,int index,std::vector< std::vector< float > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< bool > *new_std_vector_Sl_bool_Sg___SWIG_2(int capacity){
        std::vector< bool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< bool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitemcopy(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitem(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__setitem(std::vector< bool > *self,int index,bool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__AddRange(std::vector< bool > *self,std::vector< bool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__GetRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< bool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Insert(std::vector< bool > *self,int index,bool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__InsertRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveAt(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__Repeat(bool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< bool >(count, value);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_0(std::vector< bool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_1(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__SetRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Contains(std::vector< bool > *self,bool const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_bool_Sg__IndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_bool_Sg__LastIndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Remove(std::vector< bool > *self,bool const &value){
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVeci_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVeci_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVeci__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVeci__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVeci__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVeci_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVeci_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVeci_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVeci_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVeci_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVeci_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVeci_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVeci_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVeci_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdVeci(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Clear(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< int > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< std::vector< int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVeci__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< int > > *result = 0 ;
  
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVeci__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVeci__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< int > > *)new_std_vector_Sl_std_vector_Sl_int_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__setitem(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__AddRange(arg1,(std::vector< std::vector< int > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< int > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__Insert(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< int > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__Repeat((std::vector< int > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVeci_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Std2DVeci(void * jarg1) {
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  
  arg1 = (std::vector< std::vector< int > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdPairi__SWIG_0() {
  void * jresult ;
  std::pair< int,int > *result = 0 ;
  
  result = (std::pair< int,int > *)new std::pair< int,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdPairi__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  std::pair< int,int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< int,int > *)new std::pair< int,int >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdPairi__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< int,int > *arg1 = 0 ;
  std::pair< int,int > *result = 0 ;
  
  arg1 = (std::pair< int,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,int > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< int,int > *)new std::pair< int,int >((std::pair< int,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdPairi_first_set(void * jarg1, int jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int,int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdPairi_first_get(void * jarg1) {
  int jresult ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< int,int > *)jarg1; 
  result = (int) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdPairi_second_set(void * jarg1, int jarg2) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int,int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdPairi_second_get(void * jarg1) {
  int jresult ;
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< int,int > *)jarg1; 
  result = (int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdPairi(void * jarg1) {
  std::pair< int,int > *arg1 = (std::pair< int,int > *) 0 ;
  
  arg1 = (std::pair< int,int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Clear(void * jarg1) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Add(void * jarg1, void * jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::pair< int,int > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (std::pair< int,int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,int > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::pair< int,int > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  result = ((std::vector< std::pair< int,int > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type result;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  result = ((std::vector< std::pair< int,int > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > >::size_type arg2 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (std::vector< std::pair< int,int > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecPairi__SWIG_0() {
  void * jresult ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecPairi__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< int,int > > *arg1 = 0 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::pair< int,int > > *)new std::vector< std::pair< int,int > >((std::vector< std::pair< int,int > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecPairi__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::pair< int,int > > *)new_std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::pair< int,int > result;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::pair< int,int >((const std::pair< int,int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::pair< int,int > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::pair< int,int > *) &std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::pair< int,int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int,int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__setitem(arg1,arg2,(std::pair< int,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (std::vector< std::pair< int,int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__AddRange(arg1,(std::vector< std::pair< int,int > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::pair< int,int > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::pair< int,int > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int,int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Insert(arg1,arg2,(std::pair< int,int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int,int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< int,int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< int,int > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > > *result = 0 ;
  
  arg1 = (std::pair< int,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,int > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< int,int > > *)std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Repeat((std::pair< int,int > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecPairi_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,int > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int,int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_int_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< int,int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdVecPairi(void * jarg1) {
  std::vector< std::pair< int,int > > *arg1 = (std::vector< std::pair< int,int > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,int > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Clear(void * jarg1) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Add(void * jarg1, void * jarg2) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  eogmaneo::LayerDesc *arg2 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (eogmaneo::LayerDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::LayerDesc const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((eogmaneo::LayerDesc const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  std::vector< eogmaneo::LayerDesc >::size_type result;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  result = ((std::vector< eogmaneo::LayerDesc > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  std::vector< eogmaneo::LayerDesc >::size_type result;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  result = ((std::vector< eogmaneo::LayerDesc > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  std::vector< eogmaneo::LayerDesc >::size_type arg2 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (std::vector< eogmaneo::LayerDesc >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecLayerDesc__SWIG_0() {
  void * jresult ;
  std::vector< eogmaneo::LayerDesc > *result = 0 ;
  
  result = (std::vector< eogmaneo::LayerDesc > *)new std::vector< eogmaneo::LayerDesc >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecLayerDesc__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = 0 ;
  std::vector< eogmaneo::LayerDesc > *result = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::LayerDesc > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< eogmaneo::LayerDesc > *)new std::vector< eogmaneo::LayerDesc >((std::vector< eogmaneo::LayerDesc > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecLayerDesc__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< eogmaneo::LayerDesc > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< eogmaneo::LayerDesc > *)new_std_vector_Sl_eogmaneo_LayerDesc_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  eogmaneo::LayerDesc result;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_eogmaneo_LayerDesc_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new eogmaneo::LayerDesc((const eogmaneo::LayerDesc &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  eogmaneo::LayerDesc *result = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (eogmaneo::LayerDesc *) &std_vector_Sl_eogmaneo_LayerDesc_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  eogmaneo::LayerDesc *arg3 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eogmaneo::LayerDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::LayerDesc const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__setitem(arg1,arg2,(eogmaneo::LayerDesc const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_AddRange(void * jarg1, void * jarg2) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  std::vector< eogmaneo::LayerDesc > *arg2 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (std::vector< eogmaneo::LayerDesc > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::LayerDesc > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_eogmaneo_LayerDesc_Sg__AddRange(arg1,(std::vector< eogmaneo::LayerDesc > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< eogmaneo::LayerDesc > *result = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< eogmaneo::LayerDesc > *)std_vector_Sl_eogmaneo_LayerDesc_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  eogmaneo::LayerDesc *arg3 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eogmaneo::LayerDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::LayerDesc const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__Insert(arg1,arg2,(eogmaneo::LayerDesc const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  std::vector< eogmaneo::LayerDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< eogmaneo::LayerDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::LayerDesc > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__InsertRange(arg1,arg2,(std::vector< eogmaneo::LayerDesc > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_RemoveAt(void * jarg1, int jarg2) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::LayerDesc *arg1 = 0 ;
  int arg2 ;
  std::vector< eogmaneo::LayerDesc > *result = 0 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::LayerDesc const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< eogmaneo::LayerDesc > *)std_vector_Sl_eogmaneo_LayerDesc_Sg__Repeat((eogmaneo::LayerDesc const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Reverse__SWIG_0(void * jarg1) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  std_vector_Sl_eogmaneo_LayerDesc_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecLayerDesc_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  int arg2 ;
  std::vector< eogmaneo::LayerDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< eogmaneo::LayerDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::LayerDesc > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_eogmaneo_LayerDesc_Sg__SetRange(arg1,arg2,(std::vector< eogmaneo::LayerDesc > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdVecLayerDesc(void * jarg1) {
  std::vector< eogmaneo::LayerDesc > *arg1 = (std::vector< eogmaneo::LayerDesc > *) 0 ;
  
  arg1 = (std::vector< eogmaneo::LayerDesc > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecf_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecf_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecf__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecf__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecf__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_StdVecf_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_StdVecf_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecf_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecf_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecf_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecf_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVecf_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVecf_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecf_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdVecf(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Clear(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Add(void * jarg1, void * jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< float > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  result = ((std::vector< std::vector< float > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  result = ((std::vector< std::vector< float > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > >::size_type arg2 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< std::vector< float > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVecf__SWIG_0() {
  void * jresult ;
  std::vector< std::vector< float > > *result = 0 ;
  
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVecf__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = 0 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::vector< float > > *)new std::vector< std::vector< float > >((std::vector< std::vector< float > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Std2DVecf__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::vector< float > > *)new_std_vector_Sl_std_vector_Sl_float_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > result;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *) &std_vector_Sl_std_vector_Sl_float_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__setitem(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  std::vector< std::vector< float > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (std::vector< std::vector< float > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__AddRange(arg1,(std::vector< std::vector< float > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::vector< float > > *)std_vector_Sl_std_vector_Sl_float_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__Insert(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< float > > *)std_vector_Sl_std_vector_Sl_float_Sg__Sg__Repeat((std::vector< float > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Std2DVecf_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< float > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::vector< float > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< float > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_float_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::vector< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Std2DVecf(void * jarg1) {
  std::vector< std::vector< float > > *arg1 = (std::vector< std::vector< float > > *) 0 ;
  
  arg1 = (std::vector< std::vector< float > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_Clear(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_Add(void * jarg1, unsigned int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((bool const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecb_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eogmaneo_StdVecb_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecb__SWIG_0() {
  void * jresult ;
  std::vector< bool > *result = 0 ;
  
  result = (std::vector< bool > *)new std::vector< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecb__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_StdVecb__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< bool > *)new_std_vector_Sl_bool_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecb_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecb_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__setitem(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_AddRange(void * jarg1, void * jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_bool_Sg__AddRange(arg1,(std::vector< bool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecb_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__Insert(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__InsertRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_RemoveAt(void * jarg1, int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_bool_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_StdVecb_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  int arg2 ;
  bool temp1 ;
  std::vector< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__Repeat((bool const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_Reverse__SWIG_0(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  std_vector_Sl_bool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_StdVecb_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__SetRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecb_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Contains(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVecb_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__IndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_StdVecb_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__LastIndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_StdVecb_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Remove(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_StdVecb(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_ComputeSystem__SWIG_0(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  unsigned long arg2 ;
  eogmaneo::ComputeSystem *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (eogmaneo::ComputeSystem *)new eogmaneo::ComputeSystem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_ComputeSystem__SWIG_1(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  eogmaneo::ComputeSystem *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (eogmaneo::ComputeSystem *)new eogmaneo::ComputeSystem(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_ComputeSystem(void * jarg1) {
  eogmaneo::ComputeSystem *arg1 = (eogmaneo::ComputeSystem *) 0 ;
  
  arg1 = (eogmaneo::ComputeSystem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__width_set(void * jarg1, int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__height_set(void * jarg1, int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__height_get(void * jarg1) {
  int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (int) ((arg1)->_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__forwardRadius_set(void * jarg1, int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_forwardRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__forwardRadius_get(void * jarg1) {
  int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (int) ((arg1)->_forwardRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__backwardRadius_set(void * jarg1, int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_backwardRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__backwardRadius_get(void * jarg1) {
  int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (int) ((arg1)->_backwardRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__predict_set(void * jarg1, unsigned int jarg2) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  bool arg2 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_predict = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_VisibleLayerDesc__predict_get(void * jarg1) {
  unsigned int jresult ;
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  bool result;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  result = (bool) ((arg1)->_predict);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_VisibleLayerDesc() {
  void * jresult ;
  eogmaneo::VisibleLayerDesc *result = 0 ;
  
  result = (eogmaneo::VisibleLayerDesc *)new eogmaneo::VisibleLayerDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_VisibleLayerDesc(void * jarg1) {
  eogmaneo::VisibleLayerDesc *arg1 = (eogmaneo::VisibleLayerDesc *) 0 ;
  
  arg1 = (eogmaneo::VisibleLayerDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Layer_create(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6, unsigned long jarg7) {
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  std::vector< eogmaneo::VisibleLayerDesc > *arg6 = 0 ;
  unsigned long arg7 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (std::vector< eogmaneo::VisibleLayerDesc > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::VisibleLayerDesc > const & type is null", 0);
    return ;
  } 
  arg7 = (unsigned long)jarg7; 
  (arg1)->create(arg2,arg3,arg4,arg5,(std::vector< eogmaneo::VisibleLayerDesc > const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Layer_forward(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->forward((std::vector< std::vector< int > > const &)*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Layer_backward(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10) {
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  (arg1)->backward((std::vector< std::vector< int > > const &)*arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Layer_getHiddenWidth(void * jarg1) {
  int jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = (int)((eogmaneo::Layer const *)arg1)->getHiddenWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Layer_getHiddenHeight(void * jarg1) {
  int jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = (int)((eogmaneo::Layer const *)arg1)->getHiddenHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Layer_getChunkSize(void * jarg1) {
  int jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = (int)((eogmaneo::Layer const *)arg1)->getChunkSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Layer_getNumVisibleLayers(void * jarg1) {
  int jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = (int)((eogmaneo::Layer const *)arg1)->getNumVisibleLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getVisibleLayerDesc(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  eogmaneo::VisibleLayerDesc *result = 0 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eogmaneo::VisibleLayerDesc *) &((eogmaneo::Layer const *)arg1)->getVisibleLayerDesc(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Layer_getNumFeedBackLayers(void * jarg1) {
  int jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = (int)((eogmaneo::Layer const *)arg1)->getNumFeedBackLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getHiddenStates(void * jarg1) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = ((eogmaneo::Layer const *)arg1)->getHiddenStates();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getHiddenStatesPrev(void * jarg1) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  result = ((eogmaneo::Layer const *)arg1)->getHiddenStatesPrev();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getInputs(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getInputs(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getInputsPrev(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getInputsPrev(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getPredictions(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getPredictions(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getPredictionsPrev(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getPredictionsPrev(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getFeedBack(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getFeedBack(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getFeedBackPrev(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eogmaneo::Layer const *)arg1)->getFeedBackPrev(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getFeedForwardWeights(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (std::vector< float > *) &((eogmaneo::Layer const *)arg1)->getFeedForwardWeights(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Layer_getFeedBackWeights(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< float > result;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = ((eogmaneo::Layer const *)arg1)->getFeedBackWeights(arg2,arg3,arg4,arg5);
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Layer() {
  void * jresult ;
  eogmaneo::Layer *result = 0 ;
  
  result = (eogmaneo::Layer *)new eogmaneo::Layer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Layer(void * jarg1) {
  eogmaneo::Layer *arg1 = (eogmaneo::Layer *) 0 ;
  
  arg1 = (eogmaneo::Layer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__width_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__height_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__height_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__forwardRadius_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_forwardRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__forwardRadius_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_forwardRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__backwardRadius_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_backwardRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__backwardRadius_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_backwardRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__ticksPerUpdate_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_ticksPerUpdate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__ticksPerUpdate_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_ticksPerUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__temporalHorizon_set(void * jarg1, int jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_temporalHorizon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_LayerDesc__temporalHorizon_get(void * jarg1) {
  int jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  int result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (int) ((arg1)->_temporalHorizon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__alpha_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_alpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__alpha_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__beta_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_beta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__beta_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_beta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__delta_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_delta = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__delta_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_delta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__gamma_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_gamma = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__gamma_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__traceCutoff_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_traceCutoff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__traceCutoff_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_traceCutoff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__advScalar_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_advScalar = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__advScalar_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_advScalar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_LayerDesc__epsilon_set(void * jarg1, float jarg2) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_epsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_LayerDesc__epsilon_get(void * jarg1) {
  float jresult ;
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  float result;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  result = (float) ((arg1)->_epsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_LayerDesc() {
  void * jresult ;
  eogmaneo::LayerDesc *result = 0 ;
  
  result = (eogmaneo::LayerDesc *)new eogmaneo::LayerDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_LayerDesc(void * jarg1) {
  eogmaneo::LayerDesc *arg1 = (eogmaneo::LayerDesc *) 0 ;
  
  arg1 = (eogmaneo::LayerDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Hierarchy_create(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned long jarg6) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::vector< std::pair< int,int > > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< bool > *arg4 = 0 ;
  std::vector< eogmaneo::LayerDesc > *arg5 = 0 ;
  unsigned long arg6 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (std::vector< std::pair< int,int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,int > > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  arg4 = (std::vector< bool > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  arg5 = (std::vector< eogmaneo::LayerDesc > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< eogmaneo::LayerDesc > const & type is null", 0);
    return ;
  } 
  arg6 = (unsigned long)jarg6; 
  (arg1)->create((std::vector< std::pair< int,int > > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< bool > const &)*arg4,(std::vector< eogmaneo::LayerDesc > const &)*arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_Hierarchy_load(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->load((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Hierarchy_save(void * jarg1, char * jarg2) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->save((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Hierarchy_step__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  bool arg4 ;
  float arg5 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  (arg1)->step((std::vector< std::vector< int > > const &)*arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Hierarchy_step__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->step((std::vector< std::vector< int > > const &)*arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Hierarchy_step__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  std::vector< std::vector< int > > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (std::vector< std::vector< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::vector< int > > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  (arg1)->step((std::vector< std::vector< int > > const &)*arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getNumLayers(void * jarg1) {
  int jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  result = (int)((eogmaneo::Hierarchy const *)arg1)->getNumLayers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getPrediction(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< int > *) &((eogmaneo::Hierarchy const *)arg1)->getPrediction(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getAlpha(void * jarg1, int jarg2) {
  float jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((eogmaneo::Hierarchy const *)arg1)->getAlpha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getBeta(void * jarg1, int jarg2) {
  float jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((eogmaneo::Hierarchy const *)arg1)->getBeta(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getDelta(void * jarg1, int jarg2) {
  float jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((eogmaneo::Hierarchy const *)arg1)->getDelta(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getGamma(void * jarg1, int jarg2) {
  float jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((eogmaneo::Hierarchy const *)arg1)->getGamma(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getEpsilon(void * jarg1, int jarg2) {
  float jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((eogmaneo::Hierarchy const *)arg1)->getEpsilon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getTicks(void * jarg1, int jarg2) {
  int jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eogmaneo::Hierarchy const *)arg1)->getTicks(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getHistories(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  std::vector< std::vector< int > > result;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getHistories(arg2);
  jresult = new std::vector< std::vector< int > >((const std::vector< std::vector< int > > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Hierarchy_getLayer(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  eogmaneo::Layer *result = 0 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eogmaneo::Layer *) &((eogmaneo::Hierarchy const *)arg1)->getLayer(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Hierarchy() {
  void * jresult ;
  eogmaneo::Hierarchy *result = 0 ;
  
  result = (eogmaneo::Hierarchy *)new eogmaneo::Hierarchy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Hierarchy(void * jarg1) {
  eogmaneo::Hierarchy *arg1 = (eogmaneo::Hierarchy *) 0 ;
  
  arg1 = (eogmaneo::Hierarchy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__pEncoder_set(void * jarg1, void * jarg2) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  eogmaneo::RandomEncoder *arg2 = (eogmaneo::RandomEncoder *) 0 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  arg2 = (eogmaneo::RandomEncoder *)jarg2; 
  if (arg1) (arg1)->_pEncoder = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__pEncoder_get(void * jarg1) {
  void * jresult ;
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  eogmaneo::RandomEncoder *result = 0 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  result = (eogmaneo::RandomEncoder *) ((arg1)->_pEncoder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__useDistanceMetric_set(void * jarg1, unsigned int jarg2) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_useDistanceMetric = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem__useDistanceMetric_get(void * jarg1) {
  unsigned int jresult ;
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  bool result;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  result = (bool) ((arg1)->_useDistanceMetric);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_RandomEncoderWorkItem() {
  void * jresult ;
  eogmaneo::RandomEncoderWorkItem *result = 0 ;
  
  result = (eogmaneo::RandomEncoderWorkItem *)new eogmaneo::RandomEncoderWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoderWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_RandomEncoderWorkItem(void * jarg1) {
  eogmaneo::RandomEncoderWorkItem *arg1 = (eogmaneo::RandomEncoderWorkItem *) 0 ;
  
  arg1 = (eogmaneo::RandomEncoderWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__pEncoder_set(void * jarg1, void * jarg2) {
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  eogmaneo::RandomEncoder *arg2 = (eogmaneo::RandomEncoder *) 0 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  arg2 = (eogmaneo::RandomEncoder *)jarg2; 
  if (arg1) (arg1)->_pEncoder = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__pEncoder_get(void * jarg1) {
  void * jresult ;
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  eogmaneo::RandomEncoder *result = 0 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  result = (eogmaneo::RandomEncoder *) ((arg1)->_pEncoder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_RandomDecoderWorkItem() {
  void * jresult ;
  eogmaneo::RandomDecoderWorkItem *result = 0 ;
  
  result = (eogmaneo::RandomDecoderWorkItem *)new eogmaneo::RandomDecoderWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomDecoderWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_RandomDecoderWorkItem(void * jarg1) {
  eogmaneo::RandomDecoderWorkItem *arg1 = (eogmaneo::RandomDecoderWorkItem *) 0 ;
  
  arg1 = (eogmaneo::RandomDecoderWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__pEncoder_set(void * jarg1, void * jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  eogmaneo::RandomEncoder *arg2 = (eogmaneo::RandomEncoder *) 0 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (eogmaneo::RandomEncoder *)jarg2; 
  if (arg1) (arg1)->_pEncoder = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__pEncoder_get(void * jarg1) {
  void * jresult ;
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  eogmaneo::RandomEncoder *result = 0 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  result = (eogmaneo::RandomEncoder *) ((arg1)->_pEncoder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__alpha_set(void * jarg1, float jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_alpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__alpha_get(void * jarg1) {
  float jresult ;
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  float result;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  result = (float) ((arg1)->_alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__gamma_set(void * jarg1, float jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_gamma = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem__gamma_get(void * jarg1) {
  float jresult ;
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  float result;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  result = (float) ((arg1)->_gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_RandomLearnWorkItem() {
  void * jresult ;
  eogmaneo::RandomLearnWorkItem *result = 0 ;
  
  result = (eogmaneo::RandomLearnWorkItem *)new eogmaneo::RandomLearnWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomLearnWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_RandomLearnWorkItem(void * jarg1) {
  eogmaneo::RandomLearnWorkItem *arg1 = (eogmaneo::RandomLearnWorkItem *) 0 ;
  
  arg1 = (eogmaneo::RandomLearnWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_create(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, float jarg8, float jarg9, unsigned long jarg10, unsigned int jarg11) {
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float arg8 ;
  float arg9 ;
  unsigned long arg10 ;
  bool arg11 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (unsigned long)jarg10; 
  arg11 = jarg11 ? true : false; 
  (arg1)->create(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_clearHiddenStates(void * jarg1) {
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  (arg1)->clearHiddenStates();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_activate__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  std::vector< float > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  bool arg4 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (std::vector< int > *) &(arg1)->activate((std::vector< float > const &)*arg2,*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_activate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  std::vector< float > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *) &(arg1)->activate((std::vector< float > const &)*arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_reconstruct(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  std::vector< int > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *) &(arg1)->reconstruct((std::vector< int > const &)*arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_learn(void * jarg1, float jarg2, float jarg3, void * jarg4) {
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  float arg2 ;
  float arg3 ;
  eogmaneo::ComputeSystem *arg4 = 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (eogmaneo::ComputeSystem *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  (arg1)->learn(arg2,arg3,*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getInputWidth(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getInputWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getInputHeight(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getInputHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getHiddenWidth(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getHiddenWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getHiddenHeight(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getHiddenHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getChunkSize(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getChunkSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getRadius(void * jarg1) {
  int jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (int)((eogmaneo::RandomEncoder const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_RandomEncoder_getHiddenStates(void * jarg1) {
  void * jresult ;
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  result = (std::vector< int > *) &((eogmaneo::RandomEncoder const *)arg1)->getHiddenStates();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_RandomEncoder() {
  void * jresult ;
  eogmaneo::RandomEncoder *result = 0 ;
  
  result = (eogmaneo::RandomEncoder *)new eogmaneo::RandomEncoder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_RandomEncoder(void * jarg1) {
  eogmaneo::RandomEncoder *arg1 = (eogmaneo::RandomEncoder *) 0 ;
  
  arg1 = (eogmaneo::RandomEncoder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__pEncoder_set(void * jarg1, void * jarg2) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  eogmaneo::CornerEncoder *arg2 = (eogmaneo::CornerEncoder *) 0 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  arg2 = (eogmaneo::CornerEncoder *)jarg2; 
  if (arg1) (arg1)->_pEncoder = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__pEncoder_get(void * jarg1) {
  void * jresult ;
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  eogmaneo::CornerEncoder *result = 0 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  result = (eogmaneo::CornerEncoder *) ((arg1)->_pEncoder);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__useDistanceMetric_set(void * jarg1, unsigned int jarg2) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->_useDistanceMetric = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem__useDistanceMetric_get(void * jarg1) {
  unsigned int jresult ;
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  bool result;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  result = (bool) ((arg1)->_useDistanceMetric);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_CornerEncoderWorkItem() {
  void * jresult ;
  eogmaneo::CornerEncoderWorkItem *result = 0 ;
  
  result = (eogmaneo::CornerEncoderWorkItem *)new eogmaneo::CornerEncoderWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoderWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_CornerEncoderWorkItem(void * jarg1) {
  eogmaneo::CornerEncoderWorkItem *arg1 = (eogmaneo::CornerEncoderWorkItem *) 0 ;
  
  arg1 = (eogmaneo::CornerEncoderWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_create(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->create(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_clearHiddenStates(void * jarg1) {
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  (arg1)->clearHiddenStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_activate(void * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, int jarg6) {
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  std::vector< float > *arg2 = 0 ;
  eogmaneo::ComputeSystem *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg3 = (eogmaneo::ComputeSystem *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->activate((std::vector< float > const &)*arg2,*arg3,arg4,arg5,arg6);
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getInputWidth(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  result = (int)((eogmaneo::CornerEncoder const *)arg1)->getInputWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getInputHeight(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  result = (int)((eogmaneo::CornerEncoder const *)arg1)->getInputHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getChunkSize(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  result = (int)((eogmaneo::CornerEncoder const *)arg1)->getChunkSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getRadius(void * jarg1) {
  float jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  float result;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  result = (float)((eogmaneo::CornerEncoder const *)arg1)->getRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getK(void * jarg1) {
  int jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int result;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  result = (int)((eogmaneo::CornerEncoder const *)arg1)->getK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_CornerEncoder_getHiddenStates(void * jarg1, int jarg2) {
  void * jresult ;
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::vector< int > *) &((eogmaneo::CornerEncoder const *)arg1)->getHiddenStates(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_CornerEncoder() {
  void * jresult ;
  eogmaneo::CornerEncoder *result = 0 ;
  
  result = (eogmaneo::CornerEncoder *)new eogmaneo::CornerEncoder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_CornerEncoder(void * jarg1) {
  eogmaneo::CornerEncoder *arg1 = (eogmaneo::CornerEncoder *) 0 ;
  
  arg1 = (eogmaneo::CornerEncoder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__psrc_set(void * jarg1, void * jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_psrc = (std::vector< float > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__psrc_get(void * jarg1) {
  void * jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_psrc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__pdest_set(void * jarg1, void * jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_pdest = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__pdest_get(void * jarg1) {
  void * jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_pdest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__width_set(void * jarg1, int jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__radius_set(void * jarg1, int jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_radius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__radius_get(void * jarg1) {
  int jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (int) ((arg1)->_radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__strength_set(void * jarg1, float jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_strength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__strength_get(void * jarg1) {
  float jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  float result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (float) ((arg1)->_strength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_WhitenerWorkItem() {
  void * jresult ;
  eogmaneo::WhitenerWorkItem *result = 0 ;
  
  result = (eogmaneo::WhitenerWorkItem *)new eogmaneo::WhitenerWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WhitenerWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_WhitenerWorkItem(void * jarg1) {
  eogmaneo::WhitenerWorkItem *arg1 = (eogmaneo::WhitenerWorkItem *) 0 ;
  
  arg1 = (eogmaneo::WhitenerWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__psrc_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_psrc = (std::vector< float > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__psrc_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_psrc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__pdest_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_pdest = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__pdest_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_pdest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__width_set(void * jarg1, int jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_SobelXWorkItem() {
  void * jresult ;
  eogmaneo::SobelXWorkItem *result = 0 ;
  
  result = (eogmaneo::SobelXWorkItem *)new eogmaneo::SobelXWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelXWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_SobelXWorkItem(void * jarg1) {
  eogmaneo::SobelXWorkItem *arg1 = (eogmaneo::SobelXWorkItem *) 0 ;
  
  arg1 = (eogmaneo::SobelXWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__psrc_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_psrc = (std::vector< float > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__psrc_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_psrc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__pdest_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_pdest = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__pdest_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_pdest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__width_set(void * jarg1, int jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_SobelYWorkItem() {
  void * jresult ;
  eogmaneo::SobelYWorkItem *result = 0 ;
  
  result = (eogmaneo::SobelYWorkItem *)new eogmaneo::SobelYWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelYWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_SobelYWorkItem(void * jarg1) {
  eogmaneo::SobelYWorkItem *arg1 = (eogmaneo::SobelYWorkItem *) 0 ;
  
  arg1 = (eogmaneo::SobelYWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__psrcX_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_psrcX = (std::vector< float > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__psrcX_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_psrcX);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__psrcY_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_psrcY = (std::vector< float > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__psrcY_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_psrcY);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__pdest_set(void * jarg1, void * jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_pdest = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__pdest_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (std::vector< float > *) ((arg1)->_pdest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__cx_set(void * jarg1, int jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__cx_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (int) ((arg1)->_cx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__cy_set(void * jarg1, int jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_cy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__cy_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (int) ((arg1)->_cy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__width_set(void * jarg1, int jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__width_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (int) ((arg1)->_width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__clip_set(void * jarg1, float jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_clip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__clip_get(void * jarg1) {
  float jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  float result;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (float) ((arg1)->_clip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__chunkSize_set(void * jarg1, int jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem__chunkSize_get(void * jarg1) {
  int jresult ;
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  int result;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  result = (int) ((arg1)->_chunkSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_SobelCombineWorkItem() {
  void * jresult ;
  eogmaneo::SobelCombineWorkItem *result = 0 ;
  
  result = (eogmaneo::SobelCombineWorkItem *)new eogmaneo::SobelCombineWorkItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SobelCombineWorkItem_run(void * jarg1, unsigned long jarg2) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  size_t arg2 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_SobelCombineWorkItem(void * jarg1) {
  eogmaneo::SobelCombineWorkItem *arg1 = (eogmaneo::SobelCombineWorkItem *) 0 ;
  
  arg1 = (eogmaneo::SobelCombineWorkItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_whiten__SWIG_0(void * jarg1, int jarg2, int jarg3, float jarg4, void * jarg5, int jarg6) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  eogmaneo::ComputeSystem *arg5 = 0 ;
  int arg6 ;
  std::vector< float > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (eogmaneo::ComputeSystem *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = eogmaneo::whiten((std::vector< float > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_whiten__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, float jarg5, int jarg6, int jarg7, int jarg8) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  eogmaneo::whiten((std::vector< float > const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_sobel(void * jarg1, int jarg2, float jarg3, void * jarg4, int jarg5) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  int arg2 ;
  float arg3 ;
  eogmaneo::ComputeSystem *arg4 = 0 ;
  int arg5 ;
  std::vector< float > result;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (eogmaneo::ComputeSystem *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eogmaneo::ComputeSystem & type is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = eogmaneo::sobel((std::vector< float > const &)*arg1,arg2,arg3,*arg4,arg5);
  jresult = new std::vector< float >((const std::vector< float > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_sobelX(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  eogmaneo::sobelX((std::vector< float > const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_sobelY(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  eogmaneo::sobelY((std::vector< float > const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_sobelCombine(void * jarg1, void * jarg2, void * jarg3, int jarg4, float jarg5, int jarg6, int jarg7, int jarg8) {
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  int arg4 ;
  float arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  eogmaneo::sobelCombine((std::vector< float > const &)*arg1,(std::vector< float > const &)*arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SDR__chunkSize_set(void * jarg1, void * jarg2) {
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_chunkSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SDR__chunkSize_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  result =  ((arg1)->_chunkSize);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SDR__width_set(void * jarg1, void * jarg2) {
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_width = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SDR__width_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  result =  ((arg1)->_width);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SDR__height_set(void * jarg1, void * jarg2) {
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_height = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SDR__height_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  result =  ((arg1)->_height);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_SDR__chunkIndices_set(void * jarg1, void * jarg2) {
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  std::vector< sf::Uint16 > *arg2 = (std::vector< sf::Uint16 > *) 0 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  arg2 = (std::vector< sf::Uint16 > *)jarg2; 
  if (arg1) (arg1)->_chunkIndices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_SDR__chunkIndices_get(void * jarg1) {
  void * jresult ;
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  std::vector< sf::Uint16 > *result = 0 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  result = (std::vector< sf::Uint16 > *)& ((arg1)->_chunkIndices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_SDR() {
  void * jresult ;
  eogmaneo::SDR *result = 0 ;
  
  result = (eogmaneo::SDR *)new eogmaneo::SDR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_SDR(void * jarg1) {
  eogmaneo::SDR *arg1 = (eogmaneo::SDR *) 0 ;
  
  arg1 = (eogmaneo::SDR *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WeightSet__name_set(void * jarg1, char * jarg2) {
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->_name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_eogmaneo_WeightSet__name_get(void * jarg1) {
  char * jresult ;
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  result = (std::string *) & ((arg1)->_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WeightSet__radius_set(void * jarg1, void * jarg2) {
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_radius = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_WeightSet__radius_get(void * jarg1) {
  void * jresult ;
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  result =  ((arg1)->_radius);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_WeightSet__weights_set(void * jarg1, void * jarg2) {
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  arg2 = (std::vector< float > *)jarg2; 
  if (arg1) (arg1)->_weights = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_WeightSet__weights_get(void * jarg1) {
  void * jresult ;
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  result = (std::vector< float > *)& ((arg1)->_weights);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_WeightSet() {
  void * jresult ;
  eogmaneo::WeightSet *result = 0 ;
  
  result = (eogmaneo::WeightSet *)new eogmaneo::WeightSet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_WeightSet(void * jarg1) {
  eogmaneo::WeightSet *arg1 = (eogmaneo::WeightSet *) 0 ;
  
  arg1 = (eogmaneo::WeightSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Network__numLayers_set(void * jarg1, void * jarg2) {
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_numLayers = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Network__numLayers_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  result =  ((arg1)->_numLayers);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Network__numWeightSets_set(void * jarg1, void * jarg2) {
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_numWeightSets = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Network__numWeightSets_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  result =  ((arg1)->_numWeightSets);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Network__sdrs_set(void * jarg1, void * jarg2) {
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  std::vector< eogmaneo::SDR > *arg2 = (std::vector< eogmaneo::SDR > *) 0 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  arg2 = (std::vector< eogmaneo::SDR > *)jarg2; 
  if (arg1) (arg1)->_sdrs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Network__sdrs_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  std::vector< eogmaneo::SDR > *result = 0 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  result = (std::vector< eogmaneo::SDR > *)& ((arg1)->_sdrs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Network__weightSets_set(void * jarg1, void * jarg2) {
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  std::vector< eogmaneo::WeightSet > *arg2 = (std::vector< eogmaneo::WeightSet > *) 0 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  arg2 = (std::vector< eogmaneo::WeightSet > *)jarg2; 
  if (arg1) (arg1)->_weightSets = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Network__weightSets_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  std::vector< eogmaneo::WeightSet > *result = 0 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  result = (std::vector< eogmaneo::WeightSet > *)& ((arg1)->_weightSets);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Network() {
  void * jresult ;
  eogmaneo::Network *result = 0 ;
  
  result = (eogmaneo::Network *)new eogmaneo::Network();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Network(void * jarg1) {
  eogmaneo::Network *arg1 = (eogmaneo::Network *) 0 ;
  
  arg1 = (eogmaneo::Network *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Caret__layer_set(void * jarg1, void * jarg2) {
  eogmaneo::Caret *arg1 = (eogmaneo::Caret *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::Caret *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_layer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Caret__layer_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Caret *arg1 = (eogmaneo::Caret *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::Caret *)jarg1; 
  result =  ((arg1)->_layer);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_Caret__bitIndex_set(void * jarg1, void * jarg2) {
  eogmaneo::Caret *arg1 = (eogmaneo::Caret *) 0 ;
  sf::Uint16 arg2 ;
  sf::Uint16 *argp2 ;
  
  arg1 = (eogmaneo::Caret *)jarg1; 
  argp2 = (sf::Uint16 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sf::Uint16", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->_bitIndex = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_Caret__bitIndex_get(void * jarg1) {
  void * jresult ;
  eogmaneo::Caret *arg1 = (eogmaneo::Caret *) 0 ;
  sf::Uint16 result;
  
  arg1 = (eogmaneo::Caret *)jarg1; 
  result =  ((arg1)->_bitIndex);
  jresult = new sf::Uint16((const sf::Uint16 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_Caret() {
  void * jresult ;
  eogmaneo::Caret *result = 0 ;
  
  result = (eogmaneo::Caret *)new eogmaneo::Caret();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_Caret(void * jarg1) {
  eogmaneo::Caret *arg1 = (eogmaneo::Caret *) 0 ;
  
  arg1 = (eogmaneo::Caret *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_VisAdapter() {
  void * jresult ;
  eogmaneo::VisAdapter *result = 0 ;
  
  result = (eogmaneo::VisAdapter *)new eogmaneo::VisAdapter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisAdapter_create(void * jarg1, void * jarg2, int jarg3) {
  eogmaneo::VisAdapter *arg1 = (eogmaneo::VisAdapter *) 0 ;
  eogmaneo::Hierarchy *arg2 = (eogmaneo::Hierarchy *) 0 ;
  int arg3 ;
  
  arg1 = (eogmaneo::VisAdapter *)jarg1; 
  arg2 = (eogmaneo::Hierarchy *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->create(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisAdapter_update__SWIG_0(void * jarg1, float jarg2) {
  eogmaneo::VisAdapter *arg1 = (eogmaneo::VisAdapter *) 0 ;
  float arg2 ;
  
  arg1 = (eogmaneo::VisAdapter *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->update(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_VisAdapter_update__SWIG_1(void * jarg1) {
  eogmaneo::VisAdapter *arg1 = (eogmaneo::VisAdapter *) 0 ;
  
  arg1 = (eogmaneo::VisAdapter *)jarg1; 
  (arg1)->update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_VisAdapter(void * jarg1) {
  eogmaneo::VisAdapter *arg1 = (eogmaneo::VisAdapter *) 0 ;
  
  arg1 = (eogmaneo::VisAdapter *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CannyEdgeDetection__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (int)(arg1)->CannyEdgeDetection(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CannyEdgeDetection__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, int jarg5) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->CannyEdgeDetection(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CannyEdgeDetection__SWIG_2(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (int)(arg1)->CannyEdgeDetection(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_BINARY_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_BINARY;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_BINARY_INV_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_BINARY_INV;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_TRUNC_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_TRUNC;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_TOZERO_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_TOZERO;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_TOZERO_INV_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_TOZERO_INV;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_MASK;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_OTSU_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_OTSU;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_THRESH_TRIANGLE_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_THRESH_TRIANGLE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_ADAPTIVE_THRESH_MEAN_C_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_ADAPTIVE_THRESH_MEAN_C;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_CV_ADAPTIVE_THRESH_GAUSSIAN_C_get() {
  int jresult ;
  int result;
  
  result = (int)eogmaneo::OpenCVInterop::CV_ADAPTIVE_THRESH_GAUSSIAN_C;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_Threshold(void * jarg1, void * jarg2, float jarg3, float jarg4, int jarg5) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->Threshold(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_AdaptiveThreshold(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, int jarg6, float jarg7) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float arg7 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (float)jarg7; 
  result = (int)(arg1)->AdaptiveThreshold(*arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_GaborFilter(void * jarg1, void * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  int jresult ;
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int result;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (int)(arg1)->GaborFilter(*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_LineSegmentDetector__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (std::vector< int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  (arg1)->LineSegmentDetector(*arg2,arg3,arg4,arg5,*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_LineSegmentDetector__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (std::vector< int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  (arg1)->LineSegmentDetector(*arg2,arg3,arg4,arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_FastFeatureDetector__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (std::vector< int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->FastFeatureDetector(*arg2,arg3,arg4,arg5,*arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_FastFeatureDetector__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7, int jarg8, int jarg9) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (std::vector< int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->FastFeatureDetector(*arg2,arg3,arg4,arg5,*arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_OpenCVInterop_FastFeatureDetector__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7, int jarg8) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  std::vector< float > *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  std::vector< int > *arg6 = 0 ;
  bool arg7 ;
  int arg8 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (std::vector< int > *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  (arg1)->FastFeatureDetector(*arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eogmaneo_new_OpenCVInterop() {
  void * jresult ;
  eogmaneo::OpenCVInterop *result = 0 ;
  
  result = (eogmaneo::OpenCVInterop *)new eogmaneo::OpenCVInterop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eogmaneo_delete_OpenCVInterop(void * jarg1) {
  eogmaneo::OpenCVInterop *arg1 = (eogmaneo::OpenCVInterop *) 0 ;
  
  arg1 = (eogmaneo::OpenCVInterop *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

