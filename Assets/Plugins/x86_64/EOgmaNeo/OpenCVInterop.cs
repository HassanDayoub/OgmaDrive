//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eogmaneo {

public class OpenCVInterop : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OpenCVInterop(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OpenCVInterop obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~OpenCVInterop() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          eogmaneoPINVOKE.delete_OpenCVInterop(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int CannyEdgeDetection(StdVecf data, float threshold1, float threshold2, int apertureSize, bool L2gradient) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_CannyEdgeDetection__SWIG_0(swigCPtr, StdVecf.getCPtr(data), threshold1, threshold2, apertureSize, L2gradient);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CannyEdgeDetection(StdVecf data, float threshold1, float threshold2, int apertureSize) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_CannyEdgeDetection__SWIG_1(swigCPtr, StdVecf.getCPtr(data), threshold1, threshold2, apertureSize);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CannyEdgeDetection(StdVecf data, float threshold1, float threshold2) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_CannyEdgeDetection__SWIG_2(swigCPtr, StdVecf.getCPtr(data), threshold1, threshold2);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Threshold(StdVecf data, float threshold, float maxValue, int type) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_Threshold(swigCPtr, StdVecf.getCPtr(data), threshold, maxValue, type);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int AdaptiveThreshold(StdVecf data, float maxValue, int adaptiveMethod, int thresholdType, int blockSize, float C) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_AdaptiveThreshold(swigCPtr, StdVecf.getCPtr(data), maxValue, adaptiveMethod, thresholdType, blockSize, C);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GaborFilter(StdVecf data, int kernelSize, float sigma, float theta, float lambd, float gamma, float psi) {
    int ret = eogmaneoPINVOKE.OpenCVInterop_GaborFilter(swigCPtr, StdVecf.getCPtr(data), kernelSize, sigma, theta, lambd, gamma, psi);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LineSegmentDetector(StdVecf data, int width, int height, int chunkSize, StdVeci rotationSDR, bool drawLines) {
    eogmaneoPINVOKE.OpenCVInterop_LineSegmentDetector__SWIG_0(swigCPtr, StdVecf.getCPtr(data), width, height, chunkSize, StdVeci.getCPtr(rotationSDR), drawLines);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LineSegmentDetector(StdVecf data, int width, int height, int chunkSize, StdVeci rotationSDR) {
    eogmaneoPINVOKE.OpenCVInterop_LineSegmentDetector__SWIG_1(swigCPtr, StdVecf.getCPtr(data), width, height, chunkSize, StdVeci.getCPtr(rotationSDR));
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FastFeatureDetector(StdVecf data, int width, int height, int chunkSize, StdVeci featuresSDR, bool drawKeypoints, int threshold, int type, bool nonmaxSuppression) {
    eogmaneoPINVOKE.OpenCVInterop_FastFeatureDetector__SWIG_0(swigCPtr, StdVecf.getCPtr(data), width, height, chunkSize, StdVeci.getCPtr(featuresSDR), drawKeypoints, threshold, type, nonmaxSuppression);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FastFeatureDetector(StdVecf data, int width, int height, int chunkSize, StdVeci featuresSDR, bool drawKeypoints, int threshold, int type) {
    eogmaneoPINVOKE.OpenCVInterop_FastFeatureDetector__SWIG_1(swigCPtr, StdVecf.getCPtr(data), width, height, chunkSize, StdVeci.getCPtr(featuresSDR), drawKeypoints, threshold, type);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FastFeatureDetector(StdVecf data, int width, int height, int chunkSize, StdVeci featuresSDR, bool drawKeypoints, int threshold) {
    eogmaneoPINVOKE.OpenCVInterop_FastFeatureDetector__SWIG_2(swigCPtr, StdVecf.getCPtr(data), width, height, chunkSize, StdVeci.getCPtr(featuresSDR), drawKeypoints, threshold);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public OpenCVInterop() : this(eogmaneoPINVOKE.new_OpenCVInterop(), true) {
  }

  public static readonly int CV_THRESH_BINARY = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_BINARY_get();
  public static readonly int CV_THRESH_BINARY_INV = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_BINARY_INV_get();
  public static readonly int CV_THRESH_TRUNC = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_TRUNC_get();
  public static readonly int CV_THRESH_TOZERO = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_TOZERO_get();
  public static readonly int CV_THRESH_TOZERO_INV = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_TOZERO_INV_get();
  public static readonly int CV_THRESH_MASK = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_MASK_get();
  public static readonly int CV_THRESH_OTSU = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_OTSU_get();
  public static readonly int CV_THRESH_TRIANGLE = eogmaneoPINVOKE.OpenCVInterop_CV_THRESH_TRIANGLE_get();

  public static readonly int CV_ADAPTIVE_THRESH_MEAN_C = eogmaneoPINVOKE.OpenCVInterop_CV_ADAPTIVE_THRESH_MEAN_C_get();
  public static readonly int CV_ADAPTIVE_THRESH_GAUSSIAN_C = eogmaneoPINVOKE.OpenCVInterop_CV_ADAPTIVE_THRESH_GAUSSIAN_C_get();

}

}
