//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace eogmaneo {

public class Layer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Layer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Layer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Layer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          eogmaneoPINVOKE.delete_Layer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int _maxReplaySamples {
    set {
      eogmaneoPINVOKE.Layer__maxReplaySamples_set(swigCPtr, value);
    } 
    get {
      int ret = eogmaneoPINVOKE.Layer__maxReplaySamples_get(swigCPtr);
      return ret;
    } 
  }

  public int _replayIter {
    set {
      eogmaneoPINVOKE.Layer__replayIter_set(swigCPtr, value);
    } 
    get {
      int ret = eogmaneoPINVOKE.Layer__replayIter_get(swigCPtr);
      return ret;
    } 
  }

  public Layer() : this(eogmaneoPINVOKE.new_Layer(), true) {
  }

  public void create(int hiddenWidth, int hiddenHeight, int chunkSize, bool hasFeedBack, SWIGTYPE_p_std__vectorT_eogmaneo__VisibleLayerDesc_t visibleLayerDescs, uint seed) {
    eogmaneoPINVOKE.Layer_create(swigCPtr, hiddenWidth, hiddenHeight, chunkSize, hasFeedBack, SWIGTYPE_p_std__vectorT_eogmaneo__VisibleLayerDesc_t.getCPtr(visibleLayerDescs), seed);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void forward(Std2DVeci inputs, System system, float alpha) {
    eogmaneoPINVOKE.Layer_forward(swigCPtr, Std2DVeci.getCPtr(inputs), System.getCPtr(system), alpha);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void backward(Std2DVeci feedBack, System system, float reward, float beta, float delta, float gamma, float epsilon) {
    eogmaneoPINVOKE.Layer_backward(swigCPtr, Std2DVeci.getCPtr(feedBack), System.getCPtr(system), reward, beta, delta, gamma, epsilon);
    if (eogmaneoPINVOKE.SWIGPendingException.Pending) throw eogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getHiddenWidth() {
    int ret = eogmaneoPINVOKE.Layer_getHiddenWidth(swigCPtr);
    return ret;
  }

  public int getHiddenHeight() {
    int ret = eogmaneoPINVOKE.Layer_getHiddenHeight(swigCPtr);
    return ret;
  }

  public int getChunkSize() {
    int ret = eogmaneoPINVOKE.Layer_getChunkSize(swigCPtr);
    return ret;
  }

  public int getNumVisibleLayers() {
    int ret = eogmaneoPINVOKE.Layer_getNumVisibleLayers(swigCPtr);
    return ret;
  }

  public VisibleLayerDesc getVisibleLayerDesc(int v) {
    VisibleLayerDesc ret = new VisibleLayerDesc(eogmaneoPINVOKE.Layer_getVisibleLayerDesc(swigCPtr, v), false);
    return ret;
  }

  public int getNumFeedBackLayers() {
    int ret = eogmaneoPINVOKE.Layer_getNumFeedBackLayers(swigCPtr);
    return ret;
  }

  public StdVeci getHiddenStates() {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getHiddenStates(swigCPtr), true);
    return ret;
  }

  public StdVeci getHiddenStatesPrev() {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getHiddenStatesPrev(swigCPtr), true);
    return ret;
  }

  public StdVeci getInputs(int v) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getInputs(swigCPtr, v), true);
    return ret;
  }

  public StdVeci getInputsPrev(int v) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getInputsPrev(swigCPtr, v), true);
    return ret;
  }

  public StdVeci getPredictions(int v) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getPredictions(swigCPtr, v), true);
    return ret;
  }

  public StdVeci getPredictionsPrev(int v) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getPredictionsPrev(swigCPtr, v), true);
    return ret;
  }

  public StdVeci getFeedBack(int f) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getFeedBack(swigCPtr, f), true);
    return ret;
  }

  public StdVeci getFeedBackPrev(int f) {
    StdVeci ret = new StdVeci(eogmaneoPINVOKE.Layer_getFeedBackPrev(swigCPtr, f), true);
    return ret;
  }

  public StdVecf getFeedForwardWeights(int v, int x, int y) {
    StdVecf ret = new StdVecf(eogmaneoPINVOKE.Layer_getFeedForwardWeights(swigCPtr, v, x, y), false);
    return ret;
  }

  public StdVecf getFeedBackWeights(int v, int f, int x, int y) {
    StdVecf ret = new StdVecf(eogmaneoPINVOKE.Layer_getFeedBackWeights(swigCPtr, v, f, x, y), true);
    return ret;
  }

}

}
