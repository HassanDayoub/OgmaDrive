//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ogmaneo {

public class ComputeSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ComputeSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ComputeSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ComputeSystem() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          csogmaneoPINVOKE.delete_ComputeSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool create(ComputeSystem.DeviceType type, int platformIndex, int deviceIndex, bool createFromGLContext) {
    bool ret = csogmaneoPINVOKE.ComputeSystem_create__SWIG_0(swigCPtr, (int)type, platformIndex, deviceIndex, createFromGLContext);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool create(ComputeSystem.DeviceType type, int platformIndex, int deviceIndex) {
    bool ret = csogmaneoPINVOKE.ComputeSystem_create__SWIG_1(swigCPtr, (int)type, platformIndex, deviceIndex);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool create(ComputeSystem.DeviceType type, int platformIndex) {
    bool ret = csogmaneoPINVOKE.ComputeSystem_create__SWIG_2(swigCPtr, (int)type, platformIndex);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool create(ComputeSystem.DeviceType type) {
    bool ret = csogmaneoPINVOKE.ComputeSystem_create__SWIG_3(swigCPtr, (int)type);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_cl__Platform getPlatform() {
    SWIGTYPE_p_cl__Platform ret = new SWIGTYPE_p_cl__Platform(csogmaneoPINVOKE.ComputeSystem_getPlatform(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_cl__Device getDevice() {
    SWIGTYPE_p_cl__Device ret = new SWIGTYPE_p_cl__Device(csogmaneoPINVOKE.ComputeSystem_getDevice(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_cl__Context getContext() {
    SWIGTYPE_p_cl__Context ret = new SWIGTYPE_p_cl__Context(csogmaneoPINVOKE.ComputeSystem_getContext(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_cl__CommandQueue getQueue() {
    SWIGTYPE_p_cl__CommandQueue ret = new SWIGTYPE_p_cl__CommandQueue(csogmaneoPINVOKE.ComputeSystem_getQueue(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ComputeSystem() : this(csogmaneoPINVOKE.new_ComputeSystem(), true) {
  }

  public enum DeviceType {
    _cpu,
    _gpu,
    _all
  }

}

}
