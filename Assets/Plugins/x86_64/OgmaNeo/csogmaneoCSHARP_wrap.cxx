/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include <cmath>
#include <iostream>
#include <unordered_map>



#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_csogmaneo(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_csogmaneo(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_csogmaneo(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "system/SharedLib.h"
#include "system/ComputeSystem.h"
#include "system/ComputeProgram.h"
#include "neo/Hierarchy.h"
#include "neo/Architect.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< float > *new_std_vector_Sl_float_Sg___SWIG_2(int capacity){
        std::vector< float >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< float >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN float std_vector_Sl_float_Sg__getitemcopy(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN float const &std_vector_Sl_float_Sg__getitem(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__setitem(std::vector< float > *self,int index,float const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__AddRange(std::vector< float > *self,std::vector< float > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__GetRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< float >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Insert(std::vector< float > *self,int index,float const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__InsertRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveAt(std::vector< float > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_float_Sg__RemoveRange(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< float > *std_vector_Sl_float_Sg__Repeat(float const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< float >(count, value);
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_0(std::vector< float > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_float_Sg__Reverse__SWIG_1(std::vector< float > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_float_Sg__SetRange(std::vector< float > *self,int index,std::vector< float > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Contains(std::vector< float > *self,float const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_float_Sg__IndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_float_Sg__LastIndexOf(std::vector< float > *self,float const &value){
        int index = -1;
        std::vector< float >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_float_Sg__Remove(std::vector< float > *self,float const &value){
        std::vector< float >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< ogmaneo::ValueField2D > *new_std_vector_Sl_ogmaneo_ValueField2D_Sg___SWIG_2(int capacity){
        std::vector< ogmaneo::ValueField2D >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< ogmaneo::ValueField2D >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN ogmaneo::ValueField2D std_vector_Sl_ogmaneo_ValueField2D_Sg__getitemcopy(std::vector< ogmaneo::ValueField2D > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN ogmaneo::ValueField2D const &std_vector_Sl_ogmaneo_ValueField2D_Sg__getitem(std::vector< ogmaneo::ValueField2D > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__setitem(std::vector< ogmaneo::ValueField2D > *self,int index,ogmaneo::ValueField2D const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__AddRange(std::vector< ogmaneo::ValueField2D > *self,std::vector< ogmaneo::ValueField2D > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< ogmaneo::ValueField2D > *std_vector_Sl_ogmaneo_ValueField2D_Sg__GetRange(std::vector< ogmaneo::ValueField2D > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< ogmaneo::ValueField2D >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__Insert(std::vector< ogmaneo::ValueField2D > *self,int index,ogmaneo::ValueField2D const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__InsertRange(std::vector< ogmaneo::ValueField2D > *self,int index,std::vector< ogmaneo::ValueField2D > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__RemoveAt(std::vector< ogmaneo::ValueField2D > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__RemoveRange(std::vector< ogmaneo::ValueField2D > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< ogmaneo::ValueField2D > *std_vector_Sl_ogmaneo_ValueField2D_Sg__Repeat(ogmaneo::ValueField2D const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< ogmaneo::ValueField2D >(count, value);
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__Reverse__SWIG_0(std::vector< ogmaneo::ValueField2D > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__Reverse__SWIG_1(std::vector< ogmaneo::ValueField2D > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_ogmaneo_ValueField2D_Sg__SetRange(std::vector< ogmaneo::ValueField2D > *self,int index,std::vector< ogmaneo::ValueField2D > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_Clear(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_Add(void * jarg1, float jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((float const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ogmaneo_vectorf_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ogmaneo_vectorf_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  arg1 = (std::vector< float > *)jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorf__SWIG_0() {
  void * jresult ;
  std::vector< float > *result = 0 ;
  
  result = (std::vector< float > *)new std::vector< float >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorf__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorf__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< float > *)new_std_vector_Sl_float_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ogmaneo_vectorf_getitemcopy(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float)std_vector_Sl_float_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ogmaneo_vectorf_getitem(void * jarg1, int jarg2) {
  float jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (float *) &std_vector_Sl_float_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_setitem(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__setitem(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_AddRange(void * jarg1, void * jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_float_Sg__AddRange(arg1,(std::vector< float > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorf_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_Insert(void * jarg1, int jarg2, float jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__Insert(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__InsertRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_RemoveAt(void * jarg1, int jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_float_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorf_Repeat(float jarg1, int jarg2) {
  void * jresult ;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  std::vector< float > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float > *)std_vector_Sl_float_Sg__Repeat((float const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_Reverse__SWIG_0(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  std_vector_Sl_float_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_float_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorf_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float > *arg3 = 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< float > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_float_Sg__SetRange(arg1,arg2,(std::vector< float > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_vectorf_Contains(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Contains(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_vectorf_IndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__IndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_vectorf_LastIndexOf(void * jarg1, float jarg2) {
  int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  int result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_float_Sg__LastIndexOf(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_vectorf_Remove(void * jarg1, float jarg2) {
  unsigned int jresult ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  bool result;
  
  arg1 = (std::vector< float > *)jarg1; 
  temp2 = (float)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_float_Sg__Remove(arg1,(float const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_vectorf(void * jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  arg1 = (std::vector< float > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_Clear(void * jarg1) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_Add(void * jarg1, void * jarg2) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  ogmaneo::ValueField2D *arg2 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (ogmaneo::ValueField2D *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ValueField2D const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((ogmaneo::ValueField2D const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ogmaneo_vectorvf_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  std::vector< ogmaneo::ValueField2D >::size_type result;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  result = ((std::vector< ogmaneo::ValueField2D > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ogmaneo_vectorvf_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  std::vector< ogmaneo::ValueField2D >::size_type result;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  result = ((std::vector< ogmaneo::ValueField2D > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  std::vector< ogmaneo::ValueField2D >::size_type arg2 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (std::vector< ogmaneo::ValueField2D >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorvf__SWIG_0() {
  void * jresult ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  result = (std::vector< ogmaneo::ValueField2D > *)new std::vector< ogmaneo::ValueField2D >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorvf__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = 0 ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< ogmaneo::ValueField2D > *)new std::vector< ogmaneo::ValueField2D >((std::vector< ogmaneo::ValueField2D > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_vectorvf__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< ogmaneo::ValueField2D > *)new_std_vector_Sl_ogmaneo_ValueField2D_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorvf_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  ogmaneo::ValueField2D result;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_ogmaneo_ValueField2D_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new ogmaneo::ValueField2D((const ogmaneo::ValueField2D &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorvf_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  ogmaneo::ValueField2D *result = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (ogmaneo::ValueField2D *) &std_vector_Sl_ogmaneo_ValueField2D_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  ogmaneo::ValueField2D *arg3 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ogmaneo::ValueField2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ValueField2D const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__setitem(arg1,arg2,(ogmaneo::ValueField2D const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_AddRange(void * jarg1, void * jarg2) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  std::vector< ogmaneo::ValueField2D > *arg2 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (std::vector< ogmaneo::ValueField2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_ogmaneo_ValueField2D_Sg__AddRange(arg1,(std::vector< ogmaneo::ValueField2D > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorvf_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< ogmaneo::ValueField2D > *)std_vector_Sl_ogmaneo_ValueField2D_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  ogmaneo::ValueField2D *arg3 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ogmaneo::ValueField2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ValueField2D const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__Insert(arg1,arg2,(ogmaneo::ValueField2D const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  std::vector< ogmaneo::ValueField2D > *arg3 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ogmaneo::ValueField2D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__InsertRange(arg1,arg2,(std::vector< ogmaneo::ValueField2D > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_RemoveAt(void * jarg1, int jarg2) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_vectorvf_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  ogmaneo::ValueField2D *arg1 = 0 ;
  int arg2 ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ValueField2D const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< ogmaneo::ValueField2D > *)std_vector_Sl_ogmaneo_ValueField2D_Sg__Repeat((ogmaneo::ValueField2D const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_Reverse__SWIG_0(void * jarg1) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  std_vector_Sl_ogmaneo_ValueField2D_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_vectorvf_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  int arg2 ;
  std::vector< ogmaneo::ValueField2D > *arg3 = 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< ogmaneo::ValueField2D > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_ogmaneo_ValueField2D_Sg__SetRange(arg1,arg2,(std::vector< ogmaneo::ValueField2D > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_vectorvf(void * jarg1) {
  std::vector< ogmaneo::ValueField2D > *arg1 = (std::vector< ogmaneo::ValueField2D > *) 0 ;
  
  arg1 = (std::vector< ogmaneo::ValueField2D > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_CL_HPP_MINIMUM_OPENCL_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_CL_HPP_TARGET_OPENCL_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(120);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_SYS_ALLOW_CL_GL_CONTEXT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_create__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->create(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_create__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  int arg3 ;
  int arg4 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->create(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_create__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  int arg3 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->create(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_create__SWIG_3(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  result = (bool)(arg1)->create(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_getPlatform(void * jarg1) {
  void * jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  cl::Platform *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (cl::Platform *) &(arg1)->getPlatform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_getDevice(void * jarg1) {
  void * jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  cl::Device *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (cl::Device *) &(arg1)->getDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_getContext(void * jarg1) {
  void * jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  cl::Context *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (cl::Context *) &(arg1)->getContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ComputeSystem_getQueue(void * jarg1) {
  void * jresult ;
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  cl::CommandQueue *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  result = (cl::CommandQueue *) &(arg1)->getQueue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ComputeSystem() {
  void * jresult ;
  ogmaneo::ComputeSystem *result = 0 ;
  
  result = (ogmaneo::ComputeSystem *)new ogmaneo::ComputeSystem();
  
  jresult = result ? new std::shared_ptr<  ogmaneo::ComputeSystem >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_ComputeSystem(void * jarg1) {
  ogmaneo::ComputeSystem *arg1 = (ogmaneo::ComputeSystem *) 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg1;
  arg1 = (ogmaneo::ComputeSystem *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeProgram_loadFromFile(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  std::string *arg2 = 0 ;
  ogmaneo::ComputeSystem *arg3 = 0 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  
  arg3 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->loadFromFile((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeProgram_loadHierarchyKernel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  ogmaneo::ComputeSystem *arg2 = 0 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->loadHierarchyKernel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeProgram_loadPredictorKernel(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  ogmaneo::ComputeSystem *arg2 = 0 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->loadPredictorKernel(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ComputeProgram_loadSparseFeaturesKernel(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  ogmaneo::ComputeSystem *arg2 = 0 ;
  ogmaneo::SparseFeaturesType arg3 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  arg3 = (ogmaneo::SparseFeaturesType)jarg3; 
  result = (bool)(arg1)->loadSparseFeaturesKernel(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ComputeProgram_getProgram(void * jarg1) {
  void * jresult ;
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  cl::Program *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  result = (cl::Program *) &(arg1)->getProgram();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ComputeProgram() {
  void * jresult ;
  ogmaneo::ComputeProgram *result = 0 ;
  
  result = (ogmaneo::ComputeProgram *)new ogmaneo::ComputeProgram();
  
  jresult = result ? new std::shared_ptr<  ogmaneo::ComputeProgram >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_ComputeProgram(void * jarg1) {
  ogmaneo::ComputeProgram *arg1 = (ogmaneo::ComputeProgram *) 0 ;
  std::shared_ptr< ogmaneo::ComputeProgram > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::ComputeProgram > *)jarg1;
  arg1 = (ogmaneo::ComputeProgram *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_activate(void * jarg1, void * jarg2) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::vector< ogmaneo::ValueField2D > *arg2 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ogmaneo::ValueField2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > & type is null", 0);
    return ;
  } 
  (arg1)->activate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_learn__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::vector< ogmaneo::ValueField2D > *arg2 = 0 ;
  float arg3 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ogmaneo::ValueField2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->learn(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_learn__SWIG_1(void * jarg1, void * jarg2) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::vector< ogmaneo::ValueField2D > *arg2 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ogmaneo::ValueField2D > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ogmaneo::ValueField2D > & type is null", 0);
    return ;
  } 
  (arg1)->learn(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Hierarchy_getInputImagesFeed(void * jarg1) {
  void * jresult ;
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy const > *smartarg1 = 0 ;
  std::vector< cl::Image2D > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< cl::Image2D > *) &((ogmaneo::Hierarchy const *)arg1)->getInputImagesFeed();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Hierarchy_getInputImagesPredict(void * jarg1) {
  void * jresult ;
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy const > *smartarg1 = 0 ;
  std::vector< cl::Image2D > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< cl::Image2D > *) &((ogmaneo::Hierarchy const *)arg1)->getInputImagesPredict();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Hierarchy_getPredictions(void * jarg1) {
  void * jresult ;
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  std::vector< ogmaneo::ValueField2D > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< ogmaneo::ValueField2D > *) &(arg1)->getPredictions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Hierarchy_getPredictor(void * jarg1) {
  void * jresult ;
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  ogmaneo::Predictor *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = (ogmaneo::Predictor *) &(arg1)->getPredictor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_readChunkStates(void * jarg1, int jarg2, void * jarg3) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  int arg2 ;
  ogmaneo::ValueField2D *arg3 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (ogmaneo::ValueField2D *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ValueField2D & type is null", 0);
    return ;
  } 
  (arg1)->readChunkStates(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_load(void * jarg1, void * jarg2, char * jarg3) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  ogmaneo::ComputeSystem *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->load(*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Hierarchy_save(void * jarg1, void * jarg2, char * jarg3) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  ogmaneo::ComputeSystem *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->save(*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Hierarchy() {
  void * jresult ;
  ogmaneo::Hierarchy *result = 0 ;
  
  result = (ogmaneo::Hierarchy *)new ogmaneo::Hierarchy();
  
  jresult = result ? new std::shared_ptr<  ogmaneo::Hierarchy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_Hierarchy(void * jarg1) {
  ogmaneo::Hierarchy *arg1 = (ogmaneo::Hierarchy *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Hierarchy > *)jarg1;
  arg1 = (ogmaneo::Hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Vec2i_x_set(void * jarg1, int jarg2) {
  ogmaneo::Vec2i *arg1 = (ogmaneo::Vec2i *) 0 ;
  int arg2 ;
  
  arg1 = (ogmaneo::Vec2i *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_Vec2i_x_get(void * jarg1) {
  int jresult ;
  ogmaneo::Vec2i *arg1 = (ogmaneo::Vec2i *) 0 ;
  int result;
  
  arg1 = (ogmaneo::Vec2i *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Vec2i_y_set(void * jarg1, int jarg2) {
  ogmaneo::Vec2i *arg1 = (ogmaneo::Vec2i *) 0 ;
  int arg2 ;
  
  arg1 = (ogmaneo::Vec2i *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ogmaneo_Vec2i_y_get(void * jarg1) {
  int jresult ;
  ogmaneo::Vec2i *arg1 = (ogmaneo::Vec2i *) 0 ;
  int result;
  
  arg1 = (ogmaneo::Vec2i *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Vec2i__SWIG_0() {
  void * jresult ;
  ogmaneo::Vec2i *result = 0 ;
  
  result = (ogmaneo::Vec2i *)new ogmaneo::Vec2i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Vec2i__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  ogmaneo::Vec2i *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (ogmaneo::Vec2i *)new ogmaneo::Vec2i(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_Vec2i(void * jarg1) {
  ogmaneo::Vec2i *arg1 = (ogmaneo::Vec2i *) 0 ;
  
  arg1 = (ogmaneo::Vec2i *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Vec2f_x_set(void * jarg1, float jarg2) {
  ogmaneo::Vec2f *arg1 = (ogmaneo::Vec2f *) 0 ;
  float arg2 ;
  
  arg1 = (ogmaneo::Vec2f *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ogmaneo_Vec2f_x_get(void * jarg1) {
  float jresult ;
  ogmaneo::Vec2f *arg1 = (ogmaneo::Vec2f *) 0 ;
  float result;
  
  arg1 = (ogmaneo::Vec2f *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Vec2f_y_set(void * jarg1, float jarg2) {
  ogmaneo::Vec2f *arg1 = (ogmaneo::Vec2f *) 0 ;
  float arg2 ;
  
  arg1 = (ogmaneo::Vec2f *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ogmaneo_Vec2f_y_get(void * jarg1) {
  float jresult ;
  ogmaneo::Vec2f *arg1 = (ogmaneo::Vec2f *) 0 ;
  float result;
  
  arg1 = (ogmaneo::Vec2f *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Vec2f__SWIG_0() {
  void * jresult ;
  ogmaneo::Vec2f *result = 0 ;
  
  result = (ogmaneo::Vec2f *)new ogmaneo::Vec2f();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Vec2f__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ogmaneo::Vec2f *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ogmaneo::Vec2f *)new ogmaneo::Vec2f(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Vec2f__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  ogmaneo::Vec2f *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (ogmaneo::Vec2f *)new ogmaneo::Vec2f(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_Vec2f(void * jarg1) {
  ogmaneo::Vec2f *arg1 = (ogmaneo::Vec2f *) 0 ;
  
  arg1 = (ogmaneo::Vec2f *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Resources__SWIG_0() {
  void * jresult ;
  ogmaneo::Resources *result = 0 ;
  
  result = (ogmaneo::Resources *)new ogmaneo::Resources();
  
  jresult = result ? new std::shared_ptr<  ogmaneo::Resources >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Resources__SWIG_1(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  ogmaneo::ComputeSystem::DeviceType arg1 ;
  int arg2 ;
  int arg3 ;
  ogmaneo::Resources *result = 0 ;
  
  arg1 = (ogmaneo::ComputeSystem::DeviceType)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ogmaneo::Resources *)new ogmaneo::Resources(arg1,arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  ogmaneo::Resources >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Resources__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  ogmaneo::ComputeSystem::DeviceType arg1 ;
  int arg2 ;
  ogmaneo::Resources *result = 0 ;
  
  arg1 = (ogmaneo::ComputeSystem::DeviceType)jarg1; 
  arg2 = (int)jarg2; 
  result = (ogmaneo::Resources *)new ogmaneo::Resources(arg1,arg2);
  
  jresult = result ? new std::shared_ptr<  ogmaneo::Resources >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Resources__SWIG_3(int jarg1) {
  void * jresult ;
  ogmaneo::ComputeSystem::DeviceType arg1 ;
  ogmaneo::Resources *result = 0 ;
  
  arg1 = (ogmaneo::ComputeSystem::DeviceType)jarg1; 
  result = (ogmaneo::Resources *)new ogmaneo::Resources(arg1);
  
  jresult = result ? new std::shared_ptr<  ogmaneo::Resources >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Resources_create__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  int arg3 ;
  int arg4 ;
  std::shared_ptr< ogmaneo::Resources > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->create(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Resources_create__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  int arg3 ;
  std::shared_ptr< ogmaneo::Resources > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->create(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Resources_create__SWIG_2(void * jarg1, int jarg2) {
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  ogmaneo::ComputeSystem::DeviceType arg2 ;
  std::shared_ptr< ogmaneo::Resources > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ogmaneo::ComputeSystem::DeviceType)jarg2; 
  (arg1)->create(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Resources_getComputeSystem(void * jarg1) {
  void * jresult ;
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  std::shared_ptr< ogmaneo::Resources const > *smartarg1 = 0 ;
  std::shared_ptr< ogmaneo::ComputeSystem > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::shared_ptr< ogmaneo::ComputeSystem > *) &((ogmaneo::Resources const *)arg1)->getComputeSystem();
  jresult = *result ? new std::shared_ptr< ogmaneo::ComputeSystem >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Resources_getPrograms(void * jarg1) {
  void * jresult ;
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  std::shared_ptr< ogmaneo::Resources const > *smartarg1 = 0 ;
  std::unordered_map< std::string,std::shared_ptr< ogmaneo::ComputeProgram > > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::unordered_map< std::string,std::shared_ptr< ogmaneo::ComputeProgram > > *) &((ogmaneo::Resources const *)arg1)->getPrograms();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_Resources(void * jarg1) {
  ogmaneo::Resources *arg1 = (ogmaneo::Resources *) 0 ;
  std::shared_ptr< ogmaneo::Resources > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ogmaneo::Resources > *)jarg1;
  arg1 = (ogmaneo::Resources *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ValueField2D__SWIG_0() {
  void * jresult ;
  ogmaneo::ValueField2D *result = 0 ;
  
  result = (ogmaneo::ValueField2D *)new ogmaneo::ValueField2D();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ValueField2D__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  ogmaneo::Vec2i *arg1 = 0 ;
  float arg2 ;
  ogmaneo::ValueField2D *result = 0 ;
  
  arg1 = (ogmaneo::Vec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (ogmaneo::ValueField2D *)new ogmaneo::ValueField2D((ogmaneo::Vec2i const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ValueField2D__SWIG_2(void * jarg1) {
  void * jresult ;
  ogmaneo::Vec2i *arg1 = 0 ;
  ogmaneo::ValueField2D *result = 0 ;
  
  arg1 = (ogmaneo::Vec2i *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  result = (ogmaneo::ValueField2D *)new ogmaneo::ValueField2D((ogmaneo::Vec2i const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ValueField2D_create__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->create((ogmaneo::Vec2i const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ValueField2D_create__SWIG_1(void * jarg1, void * jarg2) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return ;
  } 
  (arg1)->create((ogmaneo::Vec2i const &)*arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ogmaneo_ValueField2D_getValue(void * jarg1, void * jarg2) {
  float jresult ;
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  float result;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  result = (float)((ogmaneo::ValueField2D const *)arg1)->getValue((ogmaneo::Vec2i const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ValueField2D_setValue(void * jarg1, void * jarg2, float jarg3) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setValue((ogmaneo::Vec2i const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ValueField2D_getSize(void * jarg1) {
  void * jresult ;
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::Vec2i result;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  result = ((ogmaneo::ValueField2D const *)arg1)->getSize();
  jresult = new ogmaneo::Vec2i((const ogmaneo::Vec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ValueField2D_getData(void * jarg1) {
  void * jresult ;
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  std::vector< float > *result = 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  result = (std::vector< float > *) &(arg1)->getData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ValueField2D_setValues(void * jarg1, void * jarg2) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (std::vector< float > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< float > const & type is null", 0);
    return ;
  } 
  (arg1)->setValues((std::vector< float > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ValueField2D_load(void * jarg1, void * jarg2, void * jarg3) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  ogmaneo::schemas::ValueField2D *arg2 = (ogmaneo::schemas::ValueField2D *) 0 ;
  ogmaneo::ComputeSystem *arg3 = 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (ogmaneo::schemas::ValueField2D *)jarg2; 
  
  arg3 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return ;
  } 
  (arg1)->load((ogmaneo::schemas::ValueField2D const *)arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ValueField2D_save(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  flatbuffers::FlatBufferBuilder *arg2 = 0 ;
  ogmaneo::ComputeSystem *arg3 = 0 ;
  flatbuffers::Offset< ogmaneo::schemas::ValueField2D > result;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  arg2 = (flatbuffers::FlatBufferBuilder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "flatbuffers::FlatBufferBuilder & type is null", 0);
    return 0;
  } 
  
  arg3 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  result = (arg1)->save(*arg2,*arg3);
  jresult = new flatbuffers::Offset< ogmaneo::schemas::ValueField2D >((const flatbuffers::Offset< ogmaneo::schemas::ValueField2D > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_ValueField2D(void * jarg1) {
  ogmaneo::ValueField2D *arg1 = (ogmaneo::ValueField2D *) 0 ;
  
  arg1 = (ogmaneo::ValueField2D *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier__boolTrue_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &ogmaneo::ParameterModifier::_boolTrue;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier__boolFalse_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &ogmaneo::ParameterModifier::_boolFalse;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValue__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValue((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValueBool(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValueBool((std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValue__SWIG_1(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValue((std::string const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValue__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::string *arg2 = 0 ;
  ogmaneo::Vec2i *arg3 = 0 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ogmaneo::Vec2i *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValue((std::string const &)*arg2,(ogmaneo::Vec2i const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValue__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::string *arg2 = 0 ;
  ogmaneo::Vec2f *arg3 = 0 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ogmaneo::Vec2f *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2f const & type is null", 0);
    return 0;
  } 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValue((std::string const &)*arg2,(ogmaneo::Vec2f const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_setValues(void * jarg1, void * jarg2) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  std::vector< std::pair< std::string,std::string > > *arg2 = 0 ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  arg2 = (std::vector< std::pair< std::string,std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< std::string,std::string > > const & type is null", 0);
    return 0;
  } 
  result = (ogmaneo::ParameterModifier *) &(arg1)->setValues((std::vector< std::pair< std::string,std::string > > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_parseVec2i(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ogmaneo::Vec2i result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = ogmaneo::ParameterModifier::parseVec2i((std::string const &)*arg1);
  jresult = new ogmaneo::Vec2i((const ogmaneo::Vec2i &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_parseVec2f(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  ogmaneo::Vec2f result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = ogmaneo::ParameterModifier::parseVec2f((std::string const &)*arg1);
  jresult = new ogmaneo::Vec2f((const ogmaneo::Vec2f &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_parseBool(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)ogmaneo::ParameterModifier::parseBool((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_load(void * jarg1, void * jarg2, void * jarg3) {
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  ogmaneo::schemas::ParameterModifier *arg2 = (ogmaneo::schemas::ParameterModifier *) 0 ;
  ogmaneo::ComputeSystem *arg3 = 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  arg2 = (ogmaneo::schemas::ParameterModifier *)jarg2; 
  
  arg3 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return ;
  } 
  (arg1)->load((ogmaneo::schemas::ParameterModifier const *)arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_ParameterModifier_save(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  flatbuffers::FlatBufferBuilder *arg2 = 0 ;
  ogmaneo::ComputeSystem *arg3 = 0 ;
  flatbuffers::Offset< ogmaneo::schemas::ParameterModifier > result;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  arg2 = (flatbuffers::FlatBufferBuilder *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "flatbuffers::FlatBufferBuilder & type is null", 0);
    return 0;
  } 
  
  arg3 = (ogmaneo::ComputeSystem *)(((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3) ? ((std::shared_ptr<  ogmaneo::ComputeSystem > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::ComputeSystem & reference is null", 0);
    return 0;
  } 
  result = (arg1)->save(*arg2,*arg3);
  jresult = new flatbuffers::Offset< ogmaneo::schemas::ParameterModifier >((const flatbuffers::Offset< ogmaneo::schemas::ParameterModifier > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_ParameterModifier() {
  void * jresult ;
  ogmaneo::ParameterModifier *result = 0 ;
  
  result = (ogmaneo::ParameterModifier *)new ogmaneo::ParameterModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_ParameterModifier(void * jarg1) {
  ogmaneo::ParameterModifier *arg1 = (ogmaneo::ParameterModifier *) 0 ;
  
  arg1 = (ogmaneo::ParameterModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_InputLayer() {
  void * jresult ;
  ogmaneo::InputLayer *result = 0 ;
  
  result = (ogmaneo::InputLayer *)new ogmaneo::InputLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_InputLayer(void * jarg1) {
  ogmaneo::InputLayer *arg1 = (ogmaneo::InputLayer *) 0 ;
  
  arg1 = (ogmaneo::InputLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_HigherLayer() {
  void * jresult ;
  ogmaneo::HigherLayer *result = 0 ;
  
  result = (ogmaneo::HigherLayer *)new ogmaneo::HigherLayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_HigherLayer(void * jarg1) {
  ogmaneo::HigherLayer *arg1 = (ogmaneo::HigherLayer *) 0 ;
  
  arg1 = (ogmaneo::HigherLayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Architect_initialize(void * jarg1, unsigned int jarg2, void * jarg3) {
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ogmaneo::Resources > *arg3 = 0 ;
  std::shared_ptr< ogmaneo::Resources > tempnull3 ;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< ogmaneo::Resources > *)jarg3 : &tempnull3; 
  (arg1)->initialize(arg2,(std::shared_ptr< ogmaneo::Resources > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_addInputLayer__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  bool arg3 ;
  ogmaneo::Vec2i arg4 ;
  ogmaneo::Vec2i *argp4 ;
  ogmaneo::ParameterModifier result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  argp4 = (ogmaneo::Vec2i *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ogmaneo::Vec2i", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->addInputLayer((ogmaneo::Vec2i const &)*arg2,arg3,arg4);
  jresult = new ogmaneo::ParameterModifier((const ogmaneo::ParameterModifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_addInputLayer__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  bool arg3 ;
  ogmaneo::ParameterModifier result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->addInputLayer((ogmaneo::Vec2i const &)*arg2,arg3);
  jresult = new ogmaneo::ParameterModifier((const ogmaneo::ParameterModifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_addInputLayer__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  ogmaneo::ParameterModifier result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  result = (arg1)->addInputLayer((ogmaneo::Vec2i const &)*arg2);
  jresult = new ogmaneo::ParameterModifier((const ogmaneo::ParameterModifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_addHigherLayer(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  ogmaneo::Vec2i *arg2 = 0 ;
  ogmaneo::SparseFeaturesType arg3 ;
  ogmaneo::ParameterModifier result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (ogmaneo::Vec2i *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ogmaneo::Vec2i const & type is null", 0);
    return 0;
  } 
  arg3 = (ogmaneo::SparseFeaturesType)jarg3; 
  result = (arg1)->addHigherLayer((ogmaneo::Vec2i const &)*arg2,arg3);
  jresult = new ogmaneo::ParameterModifier((const ogmaneo::ParameterModifier &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_generateHierarchy__SWIG_0(void * jarg1) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  result = (arg1)->generateHierarchy();
  jresult = result ? new std::shared_ptr< ogmaneo::Hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_Architect_generateHierarchy__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  std::unordered_map< std::string,std::string > *arg2 = 0 ;
  std::shared_ptr< ogmaneo::Hierarchy > result;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  arg2 = (std::unordered_map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::string,std::string > & type is null", 0);
    return 0;
  } 
  result = (arg1)->generateHierarchy(*arg2);
  jresult = result ? new std::shared_ptr< ogmaneo::Hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Architect_load(void * jarg1, char * jarg2) {
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->load((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_Architect_save(void * jarg1, char * jarg2) {
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->save((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ogmaneo_new_Architect() {
  void * jresult ;
  ogmaneo::Architect *result = 0 ;
  
  result = (ogmaneo::Architect *)new ogmaneo::Architect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ogmaneo_delete_Architect(void * jarg1) {
  ogmaneo::Architect *arg1 = (ogmaneo::Architect *) 0 ;
  
  arg1 = (ogmaneo::Architect *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

