//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ogmaneo {

public class Architect : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Architect(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Architect obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Architect() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csogmaneoPINVOKE.delete_Architect(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void initialize(uint seed, Resources resources) {
    csogmaneoPINVOKE.Architect_initialize(swigCPtr, seed, Resources.getCPtr(resources));
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ParameterModifier addInputLayer(Vec2i size, bool isQ, Vec2i chunkSize) {
    ParameterModifier ret = new ParameterModifier(csogmaneoPINVOKE.Architect_addInputLayer__SWIG_0(swigCPtr, Vec2i.getCPtr(size), isQ, Vec2i.getCPtr(chunkSize)), true);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParameterModifier addInputLayer(Vec2i size, bool isQ) {
    ParameterModifier ret = new ParameterModifier(csogmaneoPINVOKE.Architect_addInputLayer__SWIG_1(swigCPtr, Vec2i.getCPtr(size), isQ), true);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParameterModifier addInputLayer(Vec2i size) {
    ParameterModifier ret = new ParameterModifier(csogmaneoPINVOKE.Architect_addInputLayer__SWIG_2(swigCPtr, Vec2i.getCPtr(size)), true);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParameterModifier addHigherLayer(Vec2i size, SparseFeaturesType type) {
    ParameterModifier ret = new ParameterModifier(csogmaneoPINVOKE.Architect_addHigherLayer(swigCPtr, Vec2i.getCPtr(size), (int)type), true);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Hierarchy generateHierarchy() {
    global::System.IntPtr cPtr = csogmaneoPINVOKE.Architect_generateHierarchy__SWIG_0(swigCPtr);
    Hierarchy ret = (cPtr == global::System.IntPtr.Zero) ? null : new Hierarchy(cPtr, true);
    return ret;
  }

  public Hierarchy generateHierarchy(SWIGTYPE_p_std__unordered_mapT_std__string_std__string_t additionalParams) {
    global::System.IntPtr cPtr = csogmaneoPINVOKE.Architect_generateHierarchy__SWIG_1(swigCPtr, SWIGTYPE_p_std__unordered_mapT_std__string_std__string_t.getCPtr(additionalParams));
    Hierarchy ret = (cPtr == global::System.IntPtr.Zero) ? null : new Hierarchy(cPtr, true);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void load(string fileName) {
    csogmaneoPINVOKE.Architect_load(swigCPtr, fileName);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(string fileName) {
    csogmaneoPINVOKE.Architect_save(swigCPtr, fileName);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public Architect() : this(csogmaneoPINVOKE.new_Architect(), true) {
  }

}

}
