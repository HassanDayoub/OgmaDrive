//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace ogmaneo {

public class Hierarchy : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Hierarchy(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Hierarchy obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Hierarchy() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          csogmaneoPINVOKE.delete_Hierarchy(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void activate(vectorvf inputsFeed) {
    csogmaneoPINVOKE.Hierarchy_activate(swigCPtr, vectorvf.getCPtr(inputsFeed));
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void learn(vectorvf inputsPredict, float tdError) {
    csogmaneoPINVOKE.Hierarchy_learn__SWIG_0(swigCPtr, vectorvf.getCPtr(inputsPredict), tdError);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void learn(vectorvf inputsPredict) {
    csogmaneoPINVOKE.Hierarchy_learn__SWIG_1(swigCPtr, vectorvf.getCPtr(inputsPredict));
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_cl__Image2D_t getInputImagesFeed() {
    SWIGTYPE_p_std__vectorT_cl__Image2D_t ret = new SWIGTYPE_p_std__vectorT_cl__Image2D_t(csogmaneoPINVOKE.Hierarchy_getInputImagesFeed(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_cl__Image2D_t getInputImagesPredict() {
    SWIGTYPE_p_std__vectorT_cl__Image2D_t ret = new SWIGTYPE_p_std__vectorT_cl__Image2D_t(csogmaneoPINVOKE.Hierarchy_getInputImagesPredict(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vectorvf getPredictions() {
    vectorvf ret = new vectorvf(csogmaneoPINVOKE.Hierarchy_getPredictions(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ogmaneo__Predictor getPredictor() {
    SWIGTYPE_p_ogmaneo__Predictor ret = new SWIGTYPE_p_ogmaneo__Predictor(csogmaneoPINVOKE.Hierarchy_getPredictor(swigCPtr), false);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void readChunkStates(int li, ValueField2D valueField) {
    csogmaneoPINVOKE.Hierarchy_readChunkStates(swigCPtr, li, ValueField2D.getCPtr(valueField));
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void load(ComputeSystem cs, string fileName) {
    csogmaneoPINVOKE.Hierarchy_load(swigCPtr, ComputeSystem.getCPtr(cs), fileName);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void save(ComputeSystem cs, string fileName) {
    csogmaneoPINVOKE.Hierarchy_save(swigCPtr, ComputeSystem.getCPtr(cs), fileName);
    if (csogmaneoPINVOKE.SWIGPendingException.Pending) throw csogmaneoPINVOKE.SWIGPendingException.Retrieve();
  }

  public Hierarchy() : this(csogmaneoPINVOKE.new_Hierarchy(), true) {
  }

}

}
